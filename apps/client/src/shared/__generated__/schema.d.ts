/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/time-blocks/team/{teamId}/time-block": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 타임 블록 생성
         * @description 타임 블록을 생성한다.
         */
        post: operations["createTimeBlock"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 전체 팀 조회
         * @description 가입한 대학의 전체 팀을 조회한다.
         */
        get: operations["getAllTeams"];
        put?: never;
        /**
         * 팀 생성
         * @description 팀을 생성한다.
         */
        post: operations["createTeam"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/teams/{teamId}/trash": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getTrash"];
        put?: never;
        post: operations["restore"];
        delete: operations["deleteTrash"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/teams/{teamId}/folders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getFolders"];
        put?: never;
        post: operations["createFolder"];
        delete: operations["delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/teams/{teamId}/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getDocuments"];
        put?: never;
        post: operations["createDocuments"];
        delete: operations["delete_1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notes/template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createNoteTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notes/free": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createNoteFree"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 회원가입 API
         * @description 회원가입을 위한 정보를 보낸다.
         */
        post: operations["signUp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * s3 파일 삭제
         * @description s3의 파일 삭제한다.
         */
        post: operations["deleteFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/email-verification/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 회원가입 메일 전송
         * @description 회원 가입을 진행한다.
         */
        post: operations["sendSignUpMail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/email-verification/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 비밀번호 재설정 메일 전송
         * @description 비밀번호 재설정을 위한 이메일을 보낸다.
         */
        post: operations["sendChangingPasswordMail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/email-verification/checking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 메일 인증
         * @description 인증번호 확인
         */
        post: operations["checkCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 로그인
         * @description 로그인을 진행한다.
         */
        post: operations["signIn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/teams/{teamId}/name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateTeamName"];
        trace?: never;
    };
    "/api/v1/teams/{teamId}/member/{targetId}/admin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["alterAdmin"];
        trace?: never;
    };
    "/api/v1/teams/{teamId}/icon": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateIconImage"];
        trace?: never;
    };
    "/api/v1/teams/{teamId}/folders/{folderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateFolderName"];
        trace?: never;
    };
    "/api/v1/team-member/teams/{teamId}/members/name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateTeamMemberName"];
        trace?: never;
    };
    "/api/v1/notes/template/{noteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateNoteTemplate"];
        trace?: never;
    };
    "/api/v1/notes/free/{noteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateNoteFree"];
        trace?: never;
    };
    "/api/v1/members/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 비밀번호 변경
         * @description 비밀번호를 변경합니다.
         */
        patch: operations["changePassword"];
        trace?: never;
    };
    "/api/v1/time-blocks/team/{teamId}/timeline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 타임라인 조회
         * @description 타임라인을 조회한다.
         */
        get: operations["getTimeline"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/time-blocks/team/{teamId}/time-block/{timeBlockId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 타임 블록 상세 조회
         * @description 타임 블록을 상세 조회한다.
         */
        get: operations["getTimeBlockDetail"];
        put?: never;
        post?: never;
        /**
         * 타임 블록 삭제
         * @description 타임 블록을 삭제한다.
         */
        delete: operations["deleteTimeBlock"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/teams/category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 카테고리 조회
         * @description 카테고리 리스트를 조회한다.
         */
        get: operations["getCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/team-member/teams/{teamId}/members/position": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMemberTeamPosition"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notes/{teamId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getNote"];
        put?: never;
        post?: never;
        delete: operations["deleteNotes"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notes/{teamId}/{noteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getNoteDetail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 소속 팀 가져오기
         * @description 왼쪽 사이드바의 소속된 팀 정보를 가져옵니다.
         */
        get: operations["getBelongTeam"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/file/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Presigned Url 생성
         * @description s3로부터 Presigned Url을 생성한다.
         */
        get: operations["getPreSignedUrl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/documents/team/{teamId}/timeline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 전체 문서 조회
         * @description 전체 문서를 조회한다.
         */
        get: operations["getAllDocuments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/reissue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 엑세스 토큰 재발급
         * @description 엑세스 토큰 재발급 메서드입니다.
         */
        get: operations["reissue"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/teams/{teamId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 팀 삭제
         * @description 팀을 삭제한다.
         */
        delete: operations["deleteTeam"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/team-member/teams/{teamId}/members/{kickOutMemberId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["kickOutMemberFromTeam"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/team-member/teams/{teamId}/leave": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["leaveTeam"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/documents/team/{teamId}/document/{documentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 문서 삭제
         * @description 문서를 삭제한다.
         */
        delete: operations["deleteDocument"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ErrorResponse: {
            success?: boolean;
            message?: string;
        };
        TimeBlockCreateRequest: {
            name?: string;
            color?: string;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            /** @enum {string} */
            blockType?: "MEETING" | "ACCOUNTING" | "TASK" | "NOTICE" | "STUDY" | "EVENT";
            files?: {
                [key: string]: string;
            };
        };
        SuccessResponseTimeBlockCreateResponse: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["TimeBlockCreateResponse"];
        };
        TimeBlockCreateResponse: {
            /** Format: int64 */
            timeBlockId?: number;
        };
        TeamCreateRequest: {
            name?: string;
            /** @enum {string} */
            category?: "전체" | "학술연구" | "문화예술" | "스포츠레저" | "사회활동" | "취미활동" | "창업비즈니스" | "과학기술" | "종교" | "국제교류" | "네트워킹";
            iconImageUrl?: string;
        };
        SuccessResponseTeamCreateResponse: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["TeamCreateResponse"];
        };
        TeamCreateResponse: {
            /** Format: int64 */
            teamId?: number;
        };
        FolderCreateRequest: {
            name?: string;
        };
        FolderCreateResponse: {
            /** Format: int64 */
            folderId?: number;
        };
        SuccessResponseFolderCreateResponse: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["FolderCreateResponse"];
        };
        DocumentCreateRequest: {
            fileName?: string;
            fileUrl?: string;
            /** Format: double */
            capacity?: number;
        };
        DocumentsCreateRequest: {
            documents?: components["schemas"]["DocumentCreateRequest"][];
        };
        SuccessResponseObject: {
            success?: boolean;
            message?: string;
            data?: Record<string, never>;
        };
        NoteTemplateCreateRequest: {
            title?: string;
            complete?: boolean;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            answerWhatActivity?: string;
            answerHowToPrepare?: string;
            answerWhatIsDisappointedThing?: string;
            answerHowToFix?: string;
            timeBlockIds?: number[];
            documentIds?: number[];
            /** Format: int64 */
            teamId?: number;
        };
        NoteCreateServiceResponse: {
            /** Format: int64 */
            noteId?: number;
        };
        SuccessResponseNoteCreateServiceResponse: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["NoteCreateServiceResponse"];
        };
        NoteFreeCreateRequest: {
            title?: string;
            complete?: boolean;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            contents?: string;
            timeBlockIds?: number[];
            documentIds?: number[];
            /** Format: int64 */
            teamId?: number;
        };
        MemberProfileCreateRequest: {
            name?: string;
            /** Format: date */
            birth?: string;
            /** @enum {string} */
            univ?: "건국대학교";
            email?: string;
            password?: string;
            passwordChecker?: string;
        };
        BaseResponse: Record<string, never>;
        S3DeleteRequest: {
            fileName?: string;
        };
        EmailRequest: {
            email?: string;
        };
        CodeVerificationRequest: {
            email?: string;
            code?: string;
        };
        SignInRequest: {
            email?: string;
            password?: string;
        };
        SignInGetResponse: {
            accessToken?: string;
            refreshToken?: string;
        };
        SuccessResponseSignInGetResponse: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["SignInGetResponse"];
        };
        UpdateTeamNameRequest: {
            newTeamName: string;
        };
        UpdateTeamIconRequest: {
            iconImageUrl: string;
        };
        FolderNameUpdateRequest: {
            name?: string;
        };
        UpdateTeamMemberNameRequest: {
            newName: string;
        };
        NoteTemplateUpdateRequest: {
            title?: string;
            complete?: boolean;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            answerWhatActivity?: string;
            answerHowToPrepare?: string;
            answerWhatIsDisappointedThing?: string;
            answerHowToFix?: string;
            timeBlockIds?: number[];
            documentIds?: number[];
            /** Format: int64 */
            teamId?: number;
        };
        NoteFreeUpdateRequest: {
            title?: string;
            complete?: boolean;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            contents?: string;
            timeBlockIds?: number[];
            documentIds?: number[];
            /** Format: int64 */
            teamId?: number;
        };
        PasswordChangeRequest: {
            email?: string;
            password?: string;
            passwordChecker?: string;
        };
        SuccessResponseTimelineGetResponse: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["TimelineGetResponse"];
        };
        TimeBlockGetResponse: {
            /** Format: int64 */
            timeBlockId?: number;
            name?: string;
            color?: string;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            /** @enum {string} */
            blockType?: "MEETING" | "ACCOUNTING" | "TASK" | "NOTICE" | "STUDY" | "EVENT";
        };
        TimelineGetResponse: {
            timeBlocks?: components["schemas"]["TimeBlockGetResponse"][];
        };
        DocumentGetResponse: {
            /** Format: int64 */
            documentId?: number;
            fileName?: string;
            fileUrl?: string;
        };
        NoteNameGetResponse: {
            /** Format: int64 */
            noteId?: number;
            noteName?: string;
        };
        SuccessResponseTimeBlockDetailGetResponse: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["TimeBlockDetailGetResponse"];
        };
        TimeBlockDetailGetResponse: {
            documents?: components["schemas"]["DocumentGetResponse"][];
            notes?: components["schemas"]["NoteNameGetResponse"][];
        };
        SuccessResponseTeamsGetResponse: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["TeamsGetResponse"];
        };
        TeamGetResponse: {
            /** Format: int64 */
            teamId?: number;
            name?: string;
            /** @enum {string} */
            category?: "전체" | "학술연구" | "문화예술" | "스포츠레저" | "사회활동" | "취미활동" | "창업비즈니스" | "과학기술" | "종교" | "국제교류" | "네트워킹";
            /** @enum {string} */
            univ?: "건국대학교";
            overview?: string;
            imageUrl?: string;
        };
        TeamsGetResponse: {
            teams?: components["schemas"]["TeamGetResponse"][];
        };
        DeletedDocumentGetResponse: {
            /** Format: int64 */
            documentId?: number;
            name?: string;
            url?: string;
            /** Format: double */
            capacity?: number;
        };
        DeletedDocumentsGetResponse: {
            deletedDocuments?: components["schemas"]["DeletedDocumentGetResponse"][];
        };
        SuccessResponseDeletedDocumentsGetResponse: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["DeletedDocumentsGetResponse"];
        };
        FolderGetResponse: {
            /** Format: int64 */
            id?: number;
            name?: string;
            /** Format: date-time */
            createdTime?: string;
            path?: string;
        };
        FoldersGetResponse: {
            folders?: components["schemas"]["FolderGetResponse"][];
        };
        SuccessResponseFoldersGetResponse: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["FoldersGetResponse"];
        };
        DocumentsGetResponse: {
            documents?: components["schemas"]["DocumentGetResponse"][];
        };
        SuccessResponseDocumentsGetResponse: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["DocumentsGetResponse"];
        };
        CategoriesGetResponse: {
            categories?: ("전체" | "학술연구" | "문화예술" | "스포츠레저" | "사회활동" | "취미활동" | "창업비즈니스" | "과학기술" | "종교" | "국제교류" | "네트워킹")[];
        };
        SuccessResponseCategoriesGetResponse: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["CategoriesGetResponse"];
        };
        MemberTeamPositionGetResponse: {
            /** @enum {string} */
            position?: "ADMIN" | "EXECUTIVE" | "MEMBER";
        };
        SuccessResponseMemberTeamPositionGetResponse: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["MemberTeamPositionGetResponse"];
        };
        NoteGetResponse: {
            /** Format: int64 */
            noteId?: number;
            title?: string;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            author?: string;
            complete?: boolean;
            /** Format: date-time */
            lastUpdatedAt?: string;
        };
        NoteListGetServiceResponse: {
            noteGetResponseList?: components["schemas"]["NoteGetResponse"][];
        };
        SuccessResponseNoteListGetServiceResponse: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["NoteListGetServiceResponse"];
        };
        NoteDetailGetServiceResponse: Record<string, never>;
        SuccessResponseNoteDetailGetServiceResponse: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["NoteDetailGetServiceResponse"];
        };
        BelongTeamGetResponse: {
            /** Format: int64 */
            id?: number;
            name?: string;
            iconImageUrl?: string;
        };
        BelongTeamsGetResponse: {
            belongTeamGetResponses?: components["schemas"]["BelongTeamGetResponse"][];
        };
        SuccessResponseBelongTeamsGetResponse: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["BelongTeamsGetResponse"];
        };
        PreSignedUrlResponse: {
            fileName?: string;
            url?: string;
        };
        SuccessResponsePreSignedUrlResponse: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["PreSignedUrlResponse"];
        };
        SuccessResponse: {
            success?: boolean;
            message?: string;
            data?: Record<string, never>;
        };
        ReissueGetResponse: {
            accessToken?: string;
        };
        SuccessResponseReissueGetResponse: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["ReissueGetResponse"];
        };
        SuccessResponseVoid: {
            success?: boolean;
            message?: string;
            data?: Record<string, never>;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    createTimeBlock: {
        parameters: {
            query: {
                /**
                 * @description 타임라인 타입
                 * @example executive, member
                 */
                type: string;
            };
            header?: never;
            path: {
                /**
                 * @description 팀 id
                 * @example 1
                 */
                teamId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TimeBlockCreateRequest"];
            };
        };
        responses: {
            /** @description 성공 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseTimeBlockCreateResponse"];
                };
            };
            /** @description 타입 오류 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 접근 권한 없음 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 팀에 존재하지 않는 회원, 유효하지 않은 팀 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 클라이언트(요청) 오류 */
            "4xx": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getAllTeams: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseTeamsGetResponse"];
                };
            };
            /** @description 유효하지 않은 회원 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 클라이언트(요청) 오류 */
            "4xx": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createTeam: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TeamCreateRequest"];
            };
        };
        responses: {
            /** @description 성공 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseTeamCreateResponse"];
                };
            };
            /** @description 유효하지 않은 회원 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 클라이언트(요청) 오류 */
            "4xx": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getTrash: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                teamId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseDeletedDocumentsGetResponse"];
                };
            };
        };
    };
    restore: {
        parameters: {
            query: {
                documentId: number[];
            };
            header?: never;
            path: {
                teamId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    deleteTrash: {
        parameters: {
            query: {
                documentId: number[];
            };
            header?: never;
            path: {
                teamId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getFolders: {
        parameters: {
            query?: {
                folderId?: number;
            };
            header?: never;
            path: {
                teamId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseFoldersGetResponse"];
                };
            };
        };
    };
    createFolder: {
        parameters: {
            query?: {
                folderId?: number;
            };
            header?: never;
            path: {
                teamId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FolderCreateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseFolderCreateResponse"];
                };
            };
        };
    };
    delete: {
        parameters: {
            query: {
                folderId: number[];
            };
            header?: never;
            path: {
                teamId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getDocuments: {
        parameters: {
            query?: {
                folderId?: number;
            };
            header?: never;
            path: {
                teamId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseDocumentsGetResponse"];
                };
            };
        };
    };
    createDocuments: {
        parameters: {
            query?: {
                folderId?: number;
            };
            header?: never;
            path: {
                teamId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentsCreateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseObject"];
                };
            };
        };
    };
    delete_1: {
        parameters: {
            query: {
                documentId: number[];
            };
            header?: never;
            path: {
                teamId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    createNoteTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NoteTemplateCreateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseNoteCreateServiceResponse"];
                };
            };
        };
    };
    createNoteFree: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NoteFreeCreateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseNoteCreateServiceResponse"];
                };
            };
        };
    };
    signUp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberProfileCreateRequest"];
            };
        };
        responses: {
            /** @description 성공 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponse"];
                };
            };
            /** @description 비밀번호 불일치 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 이미 가입된 아이디 */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 클라이언트(요청) 오류 */
            "4xx": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["S3DeleteRequest"];
            };
        };
        responses: {
            /** @description 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponse"];
                };
            };
            /** @description S3 버킷의 파일 삭제 실패 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 클라이언트(요청) 오류 */
            "4xx": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    sendSignUpMail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailRequest"];
            };
        };
        responses: {
            /** @description 성공 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponse"];
                };
            };
            /** @description 이메일 형식 오류 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 이미 가입된 아이디 */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 클라이언트(요청) 오류 */
            "4xx": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    sendChangingPasswordMail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailRequest"];
            };
        };
        responses: {
            /** @description 성공 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponse"];
                };
            };
            /** @description 이메일 형식 오류 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 가입되지 않은 이메일 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 클라이언트(요청) 오류 */
            "4xx": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    checkCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CodeVerificationRequest"];
            };
        };
        responses: {
            /** @description 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponse"];
                };
            };
            /** @description 이메일 형식 오류 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 인증 값 불일치 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 인증 정보가 존재하지 않음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 클라이언트(요청) 오류 */
            "4xx": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    signIn: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignInRequest"];
            };
        };
        responses: {
            /** @description 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseSignInGetResponse"];
                };
            };
            /** @description 일치하지 않은 비밀번호 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 유효하지 않은 회원 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 클라이언트(요청) 오류 */
            "4xx": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateTeamName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                teamId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTeamNameRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponse"];
                };
            };
        };
    };
    alterAdmin: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                teamId: number;
                targetId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponse"];
                };
            };
        };
    };
    updateIconImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                teamId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTeamIconRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponse"];
                };
            };
        };
    };
    updateFolderName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                teamId: number;
                folderId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FolderNameUpdateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseObject"];
                };
            };
        };
    };
    updateTeamMemberName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                teamId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTeamMemberNameRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponse"];
                };
            };
        };
    };
    updateNoteTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                noteId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NoteTemplateUpdateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponse"];
                };
            };
        };
    };
    updateNoteFree: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                noteId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NoteFreeUpdateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponse"];
                };
            };
        };
    };
    changePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordChangeRequest"];
            };
        };
        responses: {
            /** @description 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponse"];
                };
            };
            /** @description 비밀번호가 일치하지 않습니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 유효하지 않은 회원 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 클라이언트(요청) 오류 */
            "4xx": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getTimeline: {
        parameters: {
            query: {
                /**
                 * @description 타임라인 타입
                 * @example executive, member
                 */
                type: string;
                /**
                 * @description 조회할 타임라인의 년도와 월 정보
                 * @example 2024-07
                 */
                date: string;
            };
            header?: never;
            path: {
                /**
                 * @description 팀 id
                 * @example 1
                 */
                teamId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseTimelineGetResponse"];
                };
            };
            /** @description 타입 오류 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 접근 권한 없음 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 팀에 존재하지 않는 회원, 유효하지 않은 팀 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 클라이언트(요청) 오류 */
            "4xx": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getTimeBlockDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description 팀 id
                 * @example 1
                 */
                teamId: number;
                /**
                 * @description 타임 블록 id
                 * @example 1
                 */
                timeBlockId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseTimeBlockDetailGetResponse"];
                };
            };
            /** @description 접근 권한 없음 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 팀에 존재하지 않는 회원, 유효하지 않은 타임 블록 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 클라이언트(요청) 오류 */
            "4xx": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteTimeBlock: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description 팀 id
                 * @example 1
                 */
                teamId: number;
                /**
                 * @description 타임 블록 id
                 * @example 1
                 */
                timeBlockId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description 접근 권한 없음 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 팀에 존재하지 않는 회원, 유효하지 않은 타임 블록 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 클라이언트(요청) 오류 */
            "4xx": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getCategories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseCategoriesGetResponse"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 클라이언트(요청) 오류 */
            "4xx": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getMemberTeamPosition: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                teamId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseMemberTeamPositionGetResponse"];
                };
            };
        };
    };
    getNote: {
        parameters: {
            query?: {
                createdAt?: string;
                sortOrder?: "ASC" | "DESC";
            };
            header?: never;
            path: {
                teamId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseNoteListGetServiceResponse"];
                };
            };
        };
    };
    deleteNotes: {
        parameters: {
            query: {
                noteIds: number[];
            };
            header?: never;
            path: {
                teamId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseVoid"];
                };
            };
        };
    };
    getNoteDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                teamId: number;
                noteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseNoteDetailGetServiceResponse"];
                };
            };
        };
    };
    getBelongTeam: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseBelongTeamsGetResponse"];
                };
            };
            /** @description 유효하지 않은 회원 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 클라이언트(요청) 오류 */
            "4xx": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getPreSignedUrl: {
        parameters: {
            query: {
                /**
                 * @description 파일 형식
                 * @example hwp, pdf, ...
                 */
                fileFormat: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponsePreSignedUrlResponse"];
                };
            };
            /** @description S3 PRESIGNED URL 불러오기 실패 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 클라이언트(요청) 오류 */
            "4xx": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getAllDocuments: {
        parameters: {
            query: {
                /**
                 * @description 타임라인 타입
                 * @example executive, member
                 */
                type: string;
            };
            header?: never;
            path: {
                /**
                 * @description 팀 id
                 * @example 1
                 */
                teamId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseDocumentsGetResponse"];
                };
            };
            /** @description 접근 권한 없음 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 팀에 존재하지 않는 회원 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 클라이언트(요청) 오류 */
            "4xx": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    reissue: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 성공 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseReissueGetResponse"];
                };
            };
            /** @description 인증되지 않은 사용자 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponse"];
                };
            };
            /** @description 유효하지 않은 회원 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 클라이언트(요청) 오류 */
            "4xx": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteTeam: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description 팀 id
                 * @example 1
                 */
                teamId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponse"];
                };
            };
            /** @description 유효하지 않은 회원 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 클라이언트(요청) 오류 */
            "4xx": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    kickOutMemberFromTeam: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                teamId: number;
                kickOutMemberId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponse"];
                };
            };
        };
    };
    leaveTeam: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                teamId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponse"];
                };
            };
        };
    };
    deleteDocument: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description 팀 id
                 * @example 1
                 */
                teamId: number;
                /**
                 * @description 문서 id
                 * @example 1
                 */
                documentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description 접근 권한 없음 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 팀에 존재하지 않는 회원, 유효하지 않은 문서 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 서버 내부 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 클라이언트(요청) 오류 */
            "4xx": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
